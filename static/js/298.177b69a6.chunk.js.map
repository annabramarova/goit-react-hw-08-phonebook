{"version":3,"file":"static/js/298.177b69a6.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.js","pages/RegistrationPage/RegistrationPage.js","../node_modules/@chakra-ui/form-control/dist/chunk-3HLJVDJ7.mjs","../node_modules/@chakra-ui/layout/dist/chunk-B2MGPQRJ.mjs"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { signup } from 'redux/auth/authOperations';\nimport { useForm } from 'react-hook-form';\n\nimport {\n  Stack,\n  Input,\n  Flex,\n  Button,\n  Text,\n  Box,\n  InputLeftElement,\n  InputRightElement,\n  InputGroup,\n  Heading,\n  FormLabel,\n} from '@chakra-ui/react';\n\nimport {\n  AiOutlineUser,\n  AiOutlineMail,\n  AiFillLock,\n} from 'react-icons/ai';\n\nimport {\n  RxEyeOpen,\n  RxEyeClosed\n} from 'react-icons/rx';\nimport { useState } from 'react';\n\nexport const RegisterForm = () => {\n  const [showPassword, setShowPassword] = useState();\n  const dispatch = useDispatch();\n  const { register, handleSubmit, reset, formState: { errors } } = useForm();\n\n  const onSubmit = data => {\n    dispatch(signup(data));\n    reset();\n  };\n  const handlePasswordVisibility = () => setShowPassword(!showPassword);\n\n  return (\n    <Flex justify=\"center\" align=\"canter\">\n      <Flex\n        pos=\"relative\"\n        justify=\"center\"\n        align=\"canter\"\n        direction=\"column\"\n        w=\"400px\"\n      >\n        <Heading as=\"h1\" align=\"center\" fontWeight=\"700\" fontSize=\"24px\" mb={4}>\n          Sign up\n        </Heading>\n\n        <Stack as=\"form\" gap={1} onSubmit={handleSubmit(onSubmit)}>\n          <Box pos=\"relative\">\n            <FormLabel>\n              Username\n              <InputGroup mt={2}>\n                <Input\n                  {...register('name', {\n                    required: 'Username is required',\n                  })}\n                  type=\"text\"\n                />\n                <InputLeftElement\n                  pointerEvents=\"none\"\n                  children={<AiOutlineUser color=\"gray.300\" />}\n                />\n              </InputGroup>\n            </FormLabel>\n            <Box position=\"absolute\" top=\"90%\">\n              {errors?.name && (\n                <Text\n                  fontSize=\"xs\"\n                  color=\"#ff001b\"\n                  textShadow=\"rgb(0 0 0 / 25%) 0px 2px 2px\"\n                >\n                  {errors?.name?.message || 'Error'}\n                </Text>\n              )}\n            </Box>\n          </Box>\n          <Box pos=\"relative\">\n            <FormLabel>\n              Email\n              <InputGroup mt={2}>\n                <Input\n                  {...register('email', { required: 'Email is required' })}\n                  type=\"email\"\n                />\n                <InputLeftElement\n                  pointerEvents=\"none\"\n                  children={<AiOutlineMail color=\"gray.300\" />}\n                />\n              </InputGroup>\n            </FormLabel>\n            <Box position=\"absolute\" top=\"90%\">\n              {errors?.email && (\n                <Text\n                  fontSize=\"xs\"\n                  color=\"#ff001b\"\n                  textShadow=\"rgb(0 0 0 / 25%) 0px 2px 2px\"\n                >\n                  {errors?.email?.message || 'Error'}\n                </Text>\n              )}\n            </Box>\n          </Box>\n          <Box pos=\"relative\">\n            <FormLabel>\n              Password\n              <InputGroup mt={2}>\n                <Input\n                  {...register('password', {\n                    required: 'Password is required',\n                    minLength: {\n                      value: 7,\n                      message: 'Min length is 7',\n                    },\n                  })}\n                  type={showPassword ? 'text' : 'password'}\n                />\n                <InputLeftElement\n                  pointerEvents=\"none\"\n                  children={<AiFillLock color=\"gray.300\" />}\n                />\n                <InputRightElement>\n                  <Button\n                    background=\"transparent\"\n                    p=\"0\"\n                    w=\"100%\"\n                    aria-label=\"Show hide password\"\n                    _hover={{ bg: 'transparent' }}\n                    _focus={{ bg: 'transparent' }}\n                    onClick={handlePasswordVisibility}\n                  >\n                    {showPassword ? (\n                      <RxEyeOpen />\n                    ) : (\n                      <RxEyeClosed />\n                    )}\n                  </Button>\n                </InputRightElement>\n              </InputGroup>\n            </FormLabel>\n            <Box pos=\"absolute\" top=\"90%\">\n              {errors?.password && (\n                <Text\n                  fontSize=\"xs\"\n                  color=\"#ff001b\"\n                  textShadow=\"rgb(0 0 0 / 25%) 0px 2px 2px\"\n                >\n                  {errors?.password?.message || 'Error'}\n                </Text>\n              )}\n            </Box>\n          </Box>\n          <Button type=\"submit\">Sign up</Button>\n        </Stack>\n      </Flex>\n    </Flex>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { Fragment } from 'react';\n\nexport default function Register() {\n  return (\n    <Fragment>\n      <Helmet>\n        <title>Registration Page</title>\n      </Helmet>\n      <RegisterForm />\n    </Fragment>\n  );\n}\n","import {\n  useFormControlContext,\n  useFormControlStyles\n} from \"./chunk-PXXQR4UW.mjs\";\n\n// src/form-label.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar FormLabel = forwardRef(function FormLabel2(passedProps, ref) {\n  var _a;\n  const styles = useStyleConfig(\"FormLabel\", passedProps);\n  const props = omitThemingProps(passedProps);\n  const {\n    className,\n    children,\n    requiredIndicator = /* @__PURE__ */ jsx(RequiredIndicator, {}),\n    optionalIndicator = null,\n    ...rest\n  } = props;\n  const field = useFormControlContext();\n  const ownProps = (_a = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a : { ref, ...rest };\n  return /* @__PURE__ */ jsxs(\n    chakra.label,\n    {\n      ...ownProps,\n      className: cx(\"chakra-form__label\", props.className),\n      __css: {\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles\n      },\n      children: [\n        children,\n        (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator\n      ]\n    }\n  );\n});\nFormLabel.displayName = \"FormLabel\";\nvar RequiredIndicator = forwardRef(\n  function RequiredIndicator2(props, ref) {\n    const field = useFormControlContext();\n    const styles = useFormControlStyles();\n    if (!(field == null ? void 0 : field.isRequired))\n      return null;\n    const className = cx(\"chakra-form__required-indicator\", props.className);\n    return /* @__PURE__ */ jsx(\n      chakra.span,\n      {\n        ...field == null ? void 0 : field.getRequiredIndicatorProps(props, ref),\n        __css: styles.requiredIndicator,\n        className\n      }\n    );\n  }\n);\nRequiredIndicator.displayName = \"RequiredIndicator\";\n\nexport {\n  FormLabel,\n  RequiredIndicator\n};\n","// src/heading.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Heading = forwardRef(function Heading2(props, ref) {\n  const styles = useStyleConfig(\"Heading\", props);\n  const { className, ...rest } = omitThemingProps(props);\n  return /* @__PURE__ */ jsx(\n    chakra.h2,\n    {\n      ref,\n      className: cx(\"chakra-heading\", props.className),\n      ...rest,\n      __css: styles\n    }\n  );\n});\nHeading.displayName = \"Heading\";\n\nexport {\n  Heading\n};\n"],"names":["RegisterForm","useState","showPassword","setShowPassword","dispatch","useDispatch","useForm","register","handleSubmit","reset","errors","formState","justify","align","pos","direction","w","as","fontWeight","fontSize","mb","gap","onSubmit","data","signup","mt","I","required","type","pointerEvents","children","color","position","top","name","textShadow","message","email","minLength","value","background","p","_hover","bg","_focus","onClick","password","Register","Fragment","Helmet","FormLabel","forwardRef","passedProps","ref","_a","styles","useStyleConfig","props","omitThemingProps","className","requiredIndicator","jsx","RequiredIndicator","optionalIndicator","rest","field","useFormControlContext","ownProps","getLabelProps","jsxs","chakra","cx","__css","display","textAlign","isRequired","displayName","useFormControlStyles","getRequiredIndicatorProps","Heading"],"sourceRoot":""}