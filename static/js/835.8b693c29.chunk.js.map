{"version":3,"file":"static/js/835.8b693c29.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/ModalEditContact/ModalEditContact.js","components/ModalDeleteContact/ModalDeleteContact.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.js"],"sourcesContent":["import * as Yup from 'yup';\n\nimport Notiflix from 'notiflix';\n\nimport { Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Heading,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n  Stack,\n  Text\n} from '@chakra-ui/react';\nimport {InputControl} from \"formik-chakra-ui\"; \n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { selectContacts } from 'redux/selectors';\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(20, 'Too Long!')\n    .required('Name is required field'),\n  number: Yup.number()\n    .typeError(\"That doesn't look like a phone number\")\n    .positive(\"A phone number can't start with a minus\")\n    .integer(\"A phone number can't include a decimal point\")\n    .min(8)\n    .required('A phone number is required'),\n});\n\nconst INITIAL_VALUES = {\n  name: '',\n  number: '',\n};\n\nexport function ContactForm() {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n\n    function handleSubmit(contact, { resetForm }) {\n        const nameExists = contacts.some(\n            ({ name }) => name.toLowerCase() === contact.name.toLowerCase()\n        );\n        const numberExists = contacts.some(({ number }) => number === contact.number);\n\n        if (nameExists) {\n            Notiflix.Notify.warning(`${contact.name} is already in contacts.`);\n        } else if (numberExists) {\n            Notiflix.Notify.warning(`Contact with number ${contact.number} already exists.`);\n        } else {\n            dispatch(addContact(contact));\n        }\n\n        resetForm();\n        }\n        \n    return (\n        <Box>\n            <Formik initialValues={INITIAL_VALUES} validationSchema={schema} onSubmit={handleSubmit}>\n                {({ values, handleChange, handleBlur, handleSubmit, isSubmitting }) => (\n                    <Flex alignItems=\"center\" justifyContent=\"center\">\n                        <Box w=\"xl\" p={8} borderWidth={1} borderRadius={8} boxShadow=\"lg\">\n                            <Box textAlign=\"center\">\n                                <Heading>Add contact</Heading>\n                            </Box>\n                            <Box my={4} textAlign=\"left\">\n                                <form onSubmit={handleSubmit}>\n                                    <Stack spacing={4}>\n                                        <FormControl isRequired>\n                                            <FormLabel htmlFor=\"name\">Name</FormLabel>\n                                            <InputGroup>\n                                                <InputLeftElement pointerEvents=\"none\" />\n                                                <InputControl \n                                                    type=\"text\"\n                                                    id=\"name\"\n                                                    name=\"name\"\n                                                    placeholder=\"Enter name...\"\n                                                    value={values.name}\n                                                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                                                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                />\n                                            </InputGroup>\n                                            <Text fontSize=\"sm\" color=\"red.500\">\n                                                {isSubmitting && values.name === '' && 'Name is required'}\n                                            </Text>\n                                        </FormControl>\n\n                                        <FormControl isRequired>\n                                            <FormLabel htmlFor=\"number\">Number</FormLabel>\n                                            <InputGroup>\n                                                <InputLeftElement pointerEvents=\"none\" />\n                                                <InputControl\n                                                    type=\"tel\"\n                                                    id=\"number\"\n                                                    name=\"number\"\n                                                    placeholder=\"Enter phone number...\"\n                                                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                                                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                                                    value={values.number}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                />\n                                                <InputRightElement pointerEvents=\"none\" />\n                                            </InputGroup>\n                                            <Text fontSize=\"sm\" color=\"red.500\">\n                                                {isSubmitting && values.number === '' && 'A phone number is required'}\n                                            </Text>\n                                        </FormControl>\n\n                                        <Button\n                                            mt={4}\n                                            colorScheme=\"teal\"\n                                            isLoading={isSubmitting}\n                                            loadingText='Adding contact to phonebook'\n                                            type=\"submit\"\n                                            isDisabled={!values.name || !values.number}\n                                        >\n                                            Add contact\n                                        </Button>\n                                    </Stack>\n                                </form>\n                            </Box>\n                        </Box>\n                    </Flex>)}\n            </Formik>\n        </Box>)\n};\n                        \n","import { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport {\n  Box,\n  Button,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Modal,\n  ModalCloseButton,\n  ModalContent,\n  ModalOverlay,\n  Stack,\n  Text,\n} from '@chakra-ui/react';\nimport { AiOutlineUser, AiOutlinePhone } from 'react-icons/ai';\nimport { useDispatch } from 'react-redux';\nimport { updateContact } from 'redux/contacts/contactsOperations';\n\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const ModalEditContact = ({contact, modalHandler}) => {\n    const dispatch = useDispatch();\n    const { id, name, number } = contact;\n    const { isOpen, onClose } = modalHandler;\n\n    const { register, handleSubmit, reset, formState: { errors } } = useForm({\n        defaultValues: {\n            name,\n            number,\n        },\n    });\n\n    const onSubmit = data => {\n        dispatch(updateContact({ id, data }));\n        reset();\n        onClose();\n    }\n\n     return createPortal(\n    <Modal size=\"md\" isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent p={3} maxW='container.xl'>\n        <ModalCloseButton zIndex=\"docked\" />\n        <Stack as=\"form\" gap={3} onSubmit={handleSubmit(onSubmit)}>\n          <Box pos=\"relative\">\n            <FormLabel>\n              Name\n              <InputGroup mt={3}>\n                <Input\n                  {...register('name', {\n                    required: 'Name is required',\n                    pattern: {\n                      value:\n                        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n                      message:\n                        'Name may contains only letters, apostrophe, dash and spaces.',\n                    },\n                  })}\n                  type=\"text\"\n                />\n                <InputLeftElement\n                  pointerEvents=\"none\"\n                  children={<AiOutlineUser color=\"gray.300\" />}\n                />\n              </InputGroup>\n            </FormLabel>\n            <Box position=\"absolute\" top=\"95%\">\n              {errors?.name && (\n                <Text\n                  fontSize=\"xs\"\n                  color=\"#ff001b\"\n                  textShadow=\"rgb(0 0 0 / 25%) 0px 2px 2px\"\n                >\n                  {errors?.name?.message || 'Error'}\n                </Text>\n              )}\n            </Box>\n          </Box>\n          <Box pos=\"relative\">\n            <FormLabel>\n              Number\n              <InputGroup mt={3}>\n                <Input\n                  {...register('number', {\n                    required: 'Number is required',\n                    pattern:\n                      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n                    message:\n                      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n                  })}\n                  type=\"tel\"\n                />\n                <InputLeftElement\n                  pointerEvents=\"none\"\n                  transform=\"rotate(-90deg) scale(-1) \"\n                  children={<AiOutlinePhone color=\"gray.300\" />}\n                />\n              </InputGroup>\n            </FormLabel>\n\n            <Box position=\"absolute\" top=\"95%\">\n              {errors?.number && (\n                <Text\n                  fontSize=\"xs\"\n                  color=\"#ff001b\"\n                  textShadow=\"rgb(0 0 0 / 25%) 0px 2px 2px\"\n                >\n                  {errors?.number?.message || 'Error'}\n                </Text>\n              )}\n            </Box>\n          </Box>\n          <Button type=\"submit\">Save</Button>\n        </Stack>\n      </ModalContent>\n    </Modal>,\n    modalRoot\n  );\n};\n\nModalEditContact.propTypes = {\n  contact: PropTypes.object.isRequired,\n  modalHandler: PropTypes.object.isRequired,\n};","import { createPortal } from 'react-dom';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\n\nimport {\n  Button,\n  Grid,\n  Modal,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n} from '@chakra-ui/react';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const ModalDeleteContact = ({ contact, modalHandler }) => {\n  const dispatch = useDispatch();\n  const { id, name } = contact;\n  const { isOpen, onClose } = modalHandler;\n\n  return createPortal(\n    <Modal size=\"md\" isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent p={3}>\n        <ModalCloseButton zIndex=\"docked\" />\n        <ModalHeader>\n          Are you sure to delete <b> {name}</b>?\n        </ModalHeader>\n        <Grid templateColumns=\"repeat(2, 1fr)\" gap={3}>\n          <Button onClick={() => dispatch(deleteContact(id))}>Delete</Button>\n          <Button onClick={onClose} variant=\"outline\">\n            Cancel\n          </Button>\n        </Grid>\n      </ModalContent>\n    </Modal>,\n    modalRoot\n  );\n};\n\nModalDeleteContact.propTypes = {\n  contact: PropTypes.object.isRequired,\n  modalHandler: PropTypes.object.isRequired,\n};","import PropTypes from 'prop-types';\nimport { Box, Button, Flex, Text, useDisclosure } from '@chakra-ui/react';\nimport { AiOutlineDelete, AiOutlineEdit } from 'react-icons/ai';\n\nimport { ModalEditContact } from 'components/ModalEditContact';\nimport { ModalDeleteContact } from 'components/ModalDeleteContact';\n\nexport const ContactItem = ({ contact }) => {\n    const { name, number } = contact;\n  const editModalHandler = useDisclosure();\n  const deleteModalHandler = useDisclosure();\n\n    return (\n        <Flex\n        as=\"li\"\n        justify=\"space-between\"\n        align=\"center\"\n        w='100%'\n        maxW='xl'\n        gap={6}\n        px={8}\n        py={3}\n        borderRadius=\"16px\"\n        boxShadow=\"0px 4px 18px -2px #c3d0dd\"\n      >\n        <Box>\n          <Text fontSize=\"18px\" fontWeight=\"600\">\n            {name}\n          </Text>\n          <Text>{number}</Text>\n        </Box>\n        <Flex gap={3}>\n          <Button\n            size=\"sm\"\n            borderRadius=\"70% 30% 56% 44% / 44% 61% 39% 56%\"\n            onClick={deleteModalHandler.onOpen}\n          >\n            <AiOutlineDelete />\n          </Button>\n          <Button\n            size=\"sm\"\n            borderRadius=\"28% 72% 52% 48% / 44% 53% 47% 56%\"\n            onClick={editModalHandler.onOpen}\n          >\n            <AiOutlineEdit />\n          </Button>\n        </Flex>\n      {editModalHandler.isOpen && (\n        <ModalEditContact contact={contact} modalHandler={editModalHandler} />\n      )}\n      {deleteModalHandler.isOpen && (\n          <ModalDeleteContact contact={contact} modalHandler={deleteModalHandler} />)}\n        </Flex>\n)\n}\n\nContactItem.propTypes = {\n  contact: PropTypes.object.isRequired,\n};","import { useSelector } from 'react-redux';\nimport { Flex, Spinner } from '@chakra-ui/react';\nimport { selectContactsAmount, selectError, selectFilter, selectFilteredContacts, selectFilteredTotalAmount, selectIsLoading } from 'redux/selectors';\nimport { ContactItem } from 'components/ContactItem';\n\nexport const ContactList = () => {\n  const filtered = useSelector(selectFilteredContacts);\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n  const contactsAmount = useSelector(selectContactsAmount);\n  const filter = useSelector(selectFilter);  \n  const filteredAmount = useSelector(selectFilteredTotalAmount);\n  \n\n  return (\n    <>\n      {isLoading && <Spinner color=\"gray.300\" />}  \n      {error && <Flex alignItems='center' justifyContent='center' color=\"red\">{error}</Flex>}\n      {contactsAmount > 0 ?\n        <Flex as=\"ul\" direction=\"column\" gap={4} alignItems='center' justifyContent='center'>\n        {filtered?.map(contact => (\n          <ContactItem key={contact.id} contact={contact}></ContactItem>\n        ))}\n      </Flex>\n        : <Flex alignItems='center' justifyContent='center' color=\"red\">Contacts list is empty</Flex>}\n      {filter.length !== 0 && filteredAmount === 0 && <Flex alignItems='center' justifyContent='center' color=\"red\">Contact not found. Please try again or add a new one</Flex> }\n    </>\n  );\n};\n\n\n// import { Fragment, useEffect } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { deleteContact, fetchContacts } from 'redux/contacts/contactsOperations';\n// import { selectContactsAmount, selectError, selectFilteredContacts,  selectFilteredTotalAmount} from 'redux/selectors';\n\n// import {\n//   List,\n//   ListItem,\n//   ListText,\n//   Button,\n//   ListEmpty,\n// } from './ContactList.styled';\n\n\n// const ContactList = () => {\n//   const filtered = useSelector(selectFilteredContacts);\n//   const dispatch = useDispatch();\n//   // const isLoading = useSelector(selectIsLoading);\n//   const error = useSelector(selectError);\n//   const contactsAmount = useSelector(selectContactsAmount);\n//   const filteredAmount = useSelector(selectFilteredTotalAmount);\n\n//   useEffect(() => {\n//     dispatch(fetchContacts());\n//   }, [dispatch]);\n  \n\n//   return (\n//     <Fragment>\n//       {error && <p>{error}</p>}\n//       {contactsAmount === 0 && <ListEmpty>Contacts list is empty</ListEmpty>}\n//       {filteredAmount=== 0 && <ListEmpty>Contact not found. Please try again or add a new one</ListEmpty>}\n//       <List>\n//           {filtered.map(({ id, name, number }) => (\n//             <ListItem key={id}>\n//               <ListText>{name}:  {number} </ListText>\n//               <Button type=\"button\"\n//                 onClick={() => dispatch(deleteContact(id))}\n//               >\n//                 Delete\n//               </Button>\n//             </ListItem>\n//           ))}\n//         </List>\n//     </Fragment>\n//   );\n// };\n\n// ContactList.defaultProps = {\n//   contacts: [],\n// };\n\n// export default ContactList;","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/selectors';\nimport { AiOutlineSearch } from 'react-icons/ai'; // import the icon\n\nimport { Input, Stack, Flex, InputGroup, InputLeftElement } from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  return (\n    <Flex alignItems='center' justifyContent='center'>\n      <Stack w=\"xl\" p={8}>\n        <label htmlFor='filter'>Find contact by Name </label>\n        <InputGroup>\n          <InputLeftElement pointerEvents='none'>\n            <AiOutlineSearch />\n          </InputLeftElement>\n          <Input\n            type='text'\n            id='filter'\n            placeholder='Find a person'\n            value={filter}\n            onChange={(e) => dispatch(setFilter(e.target.value))}\n          />\n        </InputGroup>\n      </Stack>\n    </Flex>\n  );\n};\n","import { Fragment, useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Box, Flex, Heading, Spinner } from '@chakra-ui/react';\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/contactsOperations\";\nimport { selectIsLoading } from \"redux/selectors\";\n\nimport { ContactForm } from \"components/ContactForm\";\nimport {ContactList} from \"components/ContactList\";\nimport { Filter } from \"components/Filter\";\n\n\nexport default function ContactsPage() {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <Fragment>\n            <Helmet>\n                <title>Contacts list</title>\n            </Helmet>\n            <Heading as='h1' mb={5} mt={5}>\n                My Contacts Profile\n            </Heading>\n            <ContactForm />\n            <Box>\n            <Filter />\n            <Flex justify=\"center\" w=\"300px\" mb={2}>\n            {isLoading && <Spinner color=\"gray.300\" />}\n            </Flex>\n                <ContactList />\n            </Box>\n        </Fragment>\n    )\n}"],"names":["schema","Yup","shape","name","min","max","required","number","typeError","positive","integer","INITIAL_VALUES","ContactForm","dispatch","useDispatch","contacts","useSelector","selectContacts","initialValues","validationSchema","onSubmit","contact","resetForm","nameExists","some","toLowerCase","numberExists","Notiflix","addContact","values","handleChange","handleBlur","handleSubmit","isSubmitting","alignItems","justifyContent","w","p","borderWidth","borderRadius","boxShadow","textAlign","my","spacing","isRequired","htmlFor","pointerEvents","type","id","placeholder","value","pattern","title","onChange","onBlur","fontSize","color","mt","colorScheme","isLoading","loadingText","isDisabled","modalRoot","document","querySelector","ModalEditContact","modalHandler","isOpen","onClose","useForm","defaultValues","register","reset","errors","formState","createPortal","size","maxW","zIndex","as","gap","data","updateContact","pos","I","message","children","position","top","textShadow","transform","ModalDeleteContact","templateColumns","onClick","deleteContact","variant","ContactItem","editModalHandler","useDisclosure","deleteModalHandler","justify","align","px","py","fontWeight","onOpen","ContactList","filtered","selectFilteredContacts","error","selectError","selectIsLoading","contactsAmount","selectContactsAmount","filter","selectFilter","filteredAmount","selectFilteredTotalAmount","direction","map","length","Filter","e","setFilter","target","ContactsPage","useEffect","fetchContacts","Fragment","Helmet","mb"],"sourceRoot":""}