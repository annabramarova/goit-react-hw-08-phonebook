{"version":3,"file":"static/js/908.7cb9834a.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.js"],"sourcesContent":["import * as Yup from 'yup';\n\nimport Notiflix from 'notiflix';\n\nimport { Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n  Stack,\n  Text,\n} from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { selectContacts } from 'redux/selectors';\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(20, 'Too Long!')\n    .required('Name is required field'),\n  number: Yup.number()\n    .typeError(\"That doesn't look like a phone number\")\n    .positive(\"A phone number can't start with a minus\")\n    .integer(\"A phone number can't include a decimal point\")\n    .min(8)\n    .required('A phone number is required'),\n});\n\nconst INITIAL_VALUES = {\n  name: '',\n  number: '',\n};\n\nexport default function ContactForm() {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n\n    function handleSubmit(contact, { resetForm }) {\n        if (\n            contacts.findIndex(\n                ({ name }) => name.toLowerCase() === contact.name.toLowerCase()\n            ) !== -1\n        ) {\n            Notiflix.Notify.warning(`${contact.name} is already in contacts.`);\n            return;\n        }\n\n        dispatch(addContact(contact));\n        resetForm();\n    }\n\n    return (\n        <Box>\n            <Formik initialValues={INITIAL_VALUES} validationSchema={schema} onSubmit={handleSubmit}>\n                {({ values, handleChange, handleBlur, handleSubmit, isSubmitting }) => (\n                    <Flex alignItems=\"center\" justifyContent=\"center\" mb={6}>\n                        <Box w=\"xl\" p={8} borderWidth={1} borderRadius={8} boxShadow=\"lg\">\n                            <Box textAlign=\"center\">\n                                <Heading>Add contact</Heading>\n                            </Box>\n                            <Box my={4} textAlign=\"left\">\n                                <form onSubmit={handleSubmit}>\n                                    <Stack spacing={4}>\n                                        <FormControl isRequired>\n                                            <FormLabel htmlFor=\"name\">Name</FormLabel>\n                                            <InputGroup>\n                                                <InputLeftElement pointerEvents=\"none\" />\n                                                <Input\n                                                    type=\"text\"\n                                                    id=\"name\"\n                                                    placeholder=\"Enter name...\"\n                                                    value={values.name}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                />\n                                            </InputGroup>\n                                            <Text fontSize=\"sm\" color=\"red.500\">\n                                                {isSubmitting && values.name === '' && 'Name is required'}\n                                            </Text>\n                                        </FormControl>\n\n                                        <FormControl isRequired>\n                                            <FormLabel htmlFor=\"number\">Number</FormLabel>\n                                            <InputGroup>\n                                                <InputLeftElement pointerEvents=\"none\" />\n                                                <Input\n                                                    type=\"tel\"\n                                                    id=\"number\"\n                                                    placeholder=\"Enter phone number...\"\n                                                    value={values.number}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                />\n                                                <InputRightElement pointerEvents=\"none\" />\n                                            </InputGroup>\n                                            <Text fontSize=\"sm\" color=\"red.500\">\n                                                {isSubmitting && values.number === '' && 'A phone number is required'}\n                                            </Text>\n                                        </FormControl>\n\n                                        <Button\n                                            mt={4}\n                                            colorScheme=\"teal\"\n                                            isLoading={isSubmitting}\n                                            type=\"submit\"\n                                            isDisabled={!values.name || !values.number}\n                                        >\n                                            Add contact\n                                        </Button>\n                                    </Stack>\n                                </form>\n                            </Box>\n                        </Box>\n                    </Flex>)}\n            </Formik>\n        </Box>)\n};\n                        \n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport { selectFilteredContacts } from 'redux/selectors';\nimport { Stack, Box, Text, Button } from \"@chakra-ui/react\";\nimport { FaTrash } from 'react-icons/fa';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectFilteredContacts);\n\n  const handleDeleteContact = (id) => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <Stack spacing=\"4\">\n      {contacts.map(({ id, name, number }) => (\n        <Box key={id} p=\"4\" bg=\"gray.100\" borderRadius=\"md\">\n          <Text fontWeight=\"bold\">{name}</Text>\n          <Text>{number}</Text>\n          <Button\n            leftIcon={<FaTrash />}\n            onClick={() => handleDeleteContact(id)}\n            colorScheme=\"red\"\n            size=\"xs\"\n            mt=\"2\"\n          >\n            Delete\n          </Button>\n        </Box>\n      ))}\n      {contacts.length === 0 && (\n        <Text fontSize=\"xl\" textAlign=\"center\">\n          No contacts found\n        </Text>\n      )}\n    </Stack>\n  );\n}\n\nexport default ContactList;\n\n// import { Fragment, useEffect } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { deleteContact, fetchContacts } from 'redux/contacts/contactsOperations';\n// import { selectContactsAmount, selectError, selectFilteredContacts,  selectFilteredTotalAmount} from 'redux/selectors';\n\n// import {\n//   List,\n//   ListItem,\n//   ListText,\n//   Button,\n//   ListEmpty,\n// } from './ContactList.styled';\n\n\n// const ContactList = () => {\n//   const filtered = useSelector(selectFilteredContacts);\n//   const dispatch = useDispatch();\n//   // const isLoading = useSelector(selectIsLoading);\n//   const error = useSelector(selectError);\n//   const contactsAmount = useSelector(selectContactsAmount);\n//   const filteredAmount = useSelector(selectFilteredTotalAmount);\n\n//   useEffect(() => {\n//     dispatch(fetchContacts());\n//   }, [dispatch]);\n  \n\n//   return (\n//     <Fragment>\n//       {error && <p>{error}</p>}\n//       {contactsAmount === 0 && <ListEmpty>Contacts list is empty</ListEmpty>}\n//       {filteredAmount=== 0 && <ListEmpty>Contact not found. Please try again or add a new one</ListEmpty>}\n//       <List>\n//           {filtered.map(({ id, name, number }) => (\n//             <ListItem key={id}>\n//               <ListText>{name}:  {number} </ListText>\n//               <Button type=\"button\"\n//                 onClick={() => dispatch(deleteContact(id))}\n//               >\n//                 Delete\n//               </Button>\n//             </ListItem>\n//           ))}\n//         </List>\n//     </Fragment>\n//   );\n// };\n\n// ContactList.defaultProps = {\n//   contacts: [],\n// };\n\n// export default ContactList;","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/selectors';\nimport { AiOutlineSearch } from 'react-icons/ai'; // import the icon\n\nimport { Input, Stack, Flex, InputGroup, InputLeftElement } from '@chakra-ui/react';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  return (\n    <Flex alignItems='center' justifyContent='center'>\n      <Stack w={['80%', '60%', '40%']} mb={5}>\n        <label htmlFor='filter'>Find contact by Name </label>\n        <InputGroup>\n          <InputLeftElement pointerEvents='none'>\n            <AiOutlineSearch />\n          </InputLeftElement>\n          <Input\n            type='text'\n            id='filter'\n            placeholder='Find a person'\n            value={filter}\n            onChange={(e) => dispatch(setFilter(e.target.value))}\n          />\n        </InputGroup>\n      </Stack>\n    </Flex>\n  );\n};\n\nexport default Filter;","import { Fragment, useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Box, Flex, Heading, Spinner } from '@chakra-ui/react';\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/contactsOperations\";\nimport { selectIsLoading } from \"redux/selectors\";\n\nimport ContactForm from \"components/ContactForm\";\nimport ContactList from \"components/ContactList\";\nimport Filter from \"components/Filter\";\n\n\n\nexport default function Contacts() {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n\n    useEffect(() => {\n        dispatch(fetchContacts())\n    }, [dispatch]);\n\n    return (\n        <Fragment>\n            <Helmet>\n                <title>Contacts list</title>\n            </Helmet>\n            <Heading as='h1' mb={5}>\n                My Contacts\n            </Heading>\n            <ContactForm />\n            <Box>\n            <Filter />\n            <Flex justify=\"center\" w=\"300px\" mb={2}>\n            {isLoading && <Spinner color=\"gray.300\" />}\n            </Flex>\n                <ContactList />\n            </Box>\n        </Fragment>\n    )\n}"],"names":["schema","Yup","shape","name","min","max","required","number","typeError","positive","integer","INITIAL_VALUES","ContactForm","dispatch","useDispatch","contacts","useSelector","selectContacts","initialValues","validationSchema","onSubmit","contact","resetForm","findIndex","toLowerCase","addContact","Notiflix","values","handleChange","handleBlur","handleSubmit","isSubmitting","alignItems","justifyContent","mb","w","p","borderWidth","borderRadius","boxShadow","textAlign","my","spacing","isRequired","htmlFor","pointerEvents","I","type","id","placeholder","value","onChange","onBlur","fontSize","color","mt","colorScheme","isLoading","isDisabled","selectFilteredContacts","map","bg","fontWeight","leftIcon","onClick","deleteContact","handleDeleteContact","size","length","filter","selectFilter","e","setFilter","target","Contacts","selectIsLoading","useEffect","fetchContacts","Fragment","Helmet","as","justify"],"sourceRoot":""}