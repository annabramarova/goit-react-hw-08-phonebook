{"version":3,"file":"static/js/581.61fdd0d2.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { ErrorMessage, Field, Form } from 'formik';\n\nconst FormStyled = styled(Form)`\ndisplay: flex;\nflex-direction: column;\ngap: 20px;`\n\nconst Label = styled.label`\nfont-size: 18px;\nfont-weight: bold;\n`;\n\nconst Input = styled(Field)`\ndisplay: block;\nwidth: 440px;\nmargin-top: 10px;\npadding: 16px;\nfont-size: 24px;\ncolor: gray;\nbackground-color: #fff;\nborder-radius: 8px;\n`;\n\nconst Button = styled.button`\ncursor: pointer;\npadding: 8px 12px;\nwidth: 150px;\ncolor: #000;\nborder-radius: 8px;\nfont-weight: bold;\nbackground: #f4f4f4;\n  box-shadow:  2px 2px 4px rgba(0, 0, 0, 0.15),\n    -2px -2px 4px rgba(0, 0, 0, 0.15);\n\n     &:active{\n    box-shadow:  inset 2px 2px 4px rgba(0, 0, 0, 0.15),\n    inset -2px -2px 4px rgba(0, 0, 0, 0.15);}\n`\n\nconst Error = styled(ErrorMessage)`\nfont-weight: 400;\nmargin: 0;\nmargin-top:10px;\ncolor: red;`\n\n\nexport { Input, Button, FormStyled, Label, Error};","import * as Yup from 'yup';\n\nimport Notiflix from 'notiflix';\n\nimport { Formik} from \"formik\";\nimport { Input, Button, FormStyled, Label, Error} from './ContactForm.styled'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { selectContacts } from 'redux/selectors';\n\n\nconst schema = Yup.object().shape({\n   name: Yup.string()\n     .min(2, 'Too Short!')\n     .max(20, 'Too Long!')\n     .required('Name is required field'),\n   number: Yup.number()\n  .typeError(\"That doesn't look like a phone number\")\n  .positive(\"A phone number can't start with a minus\")\n  .integer(\"A phone number can't include a decimal point\")\n  .min(8)\n  .required('A phone number is required'),\n });\n\nconst INITIAL_VALUES = {\n    name: '',\n    number: '',\n}\nfunction ContactForm() {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n\n    function handleSubmit(contact, { resetForm }){\n        if (contacts.findIndex(({ name }) => name.toLowerCase() === contact.name.toLowerCase()) !== -1) {\n            Notiflix.Notify.warning(`${contact.name} is already in contacts.`);\n            return;\n        }\n            \n        dispatch(addContact(contact));\n        resetForm();\n    }\n    \n    return (\n        \n            <Formik initialValues={INITIAL_VALUES} validationSchema={schema} onSubmit={handleSubmit}>\n                <FormStyled autoComplete=\"off\">\n                    <Label htmlFor=\"name\">Name\n                        <Input type=\"text\"\n                            name=\"name\"\n                            required\n                            placeholder=\"Enter name...\"\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        ></Input>\n                            <Error name=\"name\" component=\"p\"/>\n                    </Label>\n                    <Label htmlFor=\"number\">Number\n                        <Input type='tel'\n                            name=\"number\"\n                            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                            required\n                            placeholder=\"Enter phone number...\"\n                            >\n                        </Input>\n                        <Error name=\"number\" component=\"p\"/>\n                    </Label>\n                    <Button type='submit'>Add contact</Button>\n                </FormStyled>\n            </Formik>\n        );\n    }\n\n\nexport default ContactForm;","import styled from '@emotion/styled';\n\n\nconst List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  width:100%;\n  gap: 8px;\n  list-style: none;\n  padding: 0;\n`;\n\nconst ListItem = styled.li`\ndisplay: flex;\n\n`;\n\nconst ListText = styled.p`\n  margin:0;\n  font-size: 18px;\n  font-weight: bold;\n\n`;\n\nconst ListEmpty = styled.p`\n  margin-top: 20px;\n  font-size: 18px;\n  font-weight: bold;\n  color: red;\n\n`;\n\n\nconst Button = styled.button`\n  cursor: pointer;\npadding: 8px 12px;\nwidth: 100px;\ncolor: #000;\nborder-radius: 8px;\nfont-weight: bold;\nbackground: #f4f4f4;\nmargin-left: auto;\n  box-shadow:  2px 2px 4px rgba(0, 0, 0, 0.15),\n    -2px -2px 4px rgba(0, 0, 0, 0.15);\n\n     &:active{\n    box-shadow:  inset 2px 2px 4px rgba(0, 0, 0, 0.15),\n    inset -2px -2px 4px rgba(0, 0, 0, 0.15);}\n`;\n\nexport { List, ListItem, ListText, Button, ListEmpty };","import { Fragment, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact, fetchContacts } from 'redux/contacts/contactsOperations';\nimport { selectContactsAmount, selectError, selectFilteredContacts,  selectFilteredTotalAmount} from 'redux/selectors';\n\nimport {\n  List,\n  ListItem,\n  ListText,\n  Button,\n  ListEmpty,\n} from './ContactList.styled';\n\n\nconst ContactList = () => {\n  const filtered = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n  // const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contactsAmount = useSelector(selectContactsAmount);\n  const filteredAmount = useSelector(selectFilteredTotalAmount);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  \n\n  return (\n    <Fragment>\n      {error && <p>{error}</p>}\n      {contactsAmount === 0 && <ListEmpty>Contacts list is empty</ListEmpty>}\n      {filteredAmount=== 0 && <ListEmpty>Contact not found. Please try again or add a new one</ListEmpty>}\n      <List>\n          {filtered.map(({ id, name, number }) => (\n            <ListItem key={id}>\n              <ListText>{name}:  {number} </ListText>\n              <Button type=\"button\"\n                onClick={() => dispatch(deleteContact(id))}\n              >\n                Delete\n              </Button>\n            </ListItem>\n          ))}\n        </List>\n    </Fragment>\n  );\n};\n\nContactList.defaultProps = {\n  contacts: [],\n};\n\nexport default ContactList;","import styled from '@emotion/styled';\n\nconst FilterName = styled.input`\n  display: block;\nmargin-top: 10px;\npadding: 12px 16px;\nwidth: 440px;\nfont-size: 18px;\ncolor: gray;\nbackground-color: #fff;\nborder-radius: 8px;`\n\nconst Label = styled.label`\nfont-size: 18px;\nfont-weight: bold;\n`;\n\n\n\nexport { FilterName, Label};","import { Fragment } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/selectors';\nimport { FilterName, Label} from './Filter.styled'\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  return (\n    <Fragment>\n    <Label>Find contact by Name </Label>\n    <FilterName\n      type=\"text\"\n      name=\"filter\"\n      placeholder=\"Find a person\"\n      value={filter}\n      onChange={e => dispatch(setFilter(e.target.value))}\n    />\n    </Fragment>\n  );\n};\n\nexport default Filter;","import ContactForm from \"components/ContactForm\";\nimport ContactList from \"components/ContactList\";\nimport Filter from \"components/Filter\";\nimport { Fragment, useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/contactsOperations\";\n\nexport default function Contacts() {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts())\n    }, [dispatch]);\n\n    return (\n        <Fragment>\n            <Helmet>\n                <title>Phonebook. Contacts list</title>\n            </Helmet>\n            <ContactForm />\n            <Filter />\n            <ContactList />\n        </Fragment>\n    )\n}"],"names":["FormStyled","styled","Form","Label","Input","Field","Button","Error","ErrorMessage","schema","Yup","shape","name","min","max","required","number","typeError","positive","integer","INITIAL_VALUES","dispatch","useDispatch","contacts","useSelector","selectContacts","initialValues","validationSchema","onSubmit","contact","resetForm","findIndex","toLowerCase","addContact","Notiflix","autoComplete","htmlFor","type","placeholder","pattern","title","component","List","ListItem","ListText","ListEmpty","ContactList","filtered","selectFilteredContacts","error","selectError","contactsAmount","selectContactsAmount","filteredAmount","selectFilteredTotalAmount","useEffect","fetchContacts","Fragment","map","id","onClick","deleteContact","defaultProps","FilterName","filter","selectFilter","value","onChange","e","setFilter","target","Contacts","Helmet"],"sourceRoot":""}